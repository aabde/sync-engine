#! /bin/sh
### BEGIN INIT INFO
# Provides:          skeleton
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Example initscript
# Description:       This file should be used to construct scripts to be
#                    placed in /etc/init.d.
### END INIT INFO

# Author: Foo Bar <foobar@baz.org>
#
# Please remove the "Author" lines above and replace them
# with your own name if you copy and modify this script.

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Start Nylas sync engine and api"
NAME_1='inbox-sync-0'
DAEMON_1=/vagrant/bin/inbox-start
PIDFILE_1=/var/run/$NAME_1.pid
NAME_2=inbox-api
DAEMON_2=/vagrant/bin/$NAME_2
PIDFILE_2=/var/run/$NAME_2.pid
SCRIPTNAME=/etc/init.d/launcher
USER=vagrant

# Exit if the package is not installed
[ -x "$DAEMON_1" ] || exit 0
[ -x "$DAEMON_2" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME_1 ] && . /etc/default/$NAME_1
[ -r /etc/default/$NAME_2 ] && . /etc/default/$NAME_2

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
        # Return
        #   0 if daemon has been started
        #   1 if daemon was already running
        #   2 if daemon could not be started
	#start-stop-daemon -S -b -n $NAME_1 -c $USER -a $DAEMON_1 -- --prod && \
	su vagrant -c "nohup $DAEMON_1 >> /var/log/inbox-sync.log &" &&
    start-stop-daemon -S -b -n $NAME_2 -c $USER -a $DAEMON_2 -- --prod \
                || return 2
        # Add code here, if necessary, that waits for the process to be ready
        # to handle requests from services started subsequently which depend
        # on this one.  As a last resort, sleep for some time.
}

max_number()
{
    printf "%s\n" "$@" | sort -g -r | head -n1
}

#
# Function that stops the daemon/service
#
do_stop()
{
        # Return
        #   0 if daemon has been stopped
        #   1 if daemon was already stopped
        #   2 if daemon could not be stopped
        #   other if a failure occurred
        start-stop-daemon -K -q --retry=TERM/30/KILL/5 -n $NAME_1 -c $USER
        RETVAL_1="$?"
        [ "$RETVAL_1" = 2 ] && return 2
        start-stop-daemon -K -q --retry=TERM/30/KILL/5 -n $NAME_2 -c $USER
	RETVAL_2="$?"
        [ "$RETVAL_2" = 2 ] && return 2
        # Wait for children to finish too if this is a daemon that forks
        # and if the daemon is only ever run from this initscript.
        # If the above conditions are not satisfied then add some other code
        # that waits for the process to drop all resources that could be
        # needed by services started subsequently.  A last resort is to
        # sleep for some time.
        # Many daemons don't delete their pidfiles when they exit.
        rm -f $PIDFILE_1
        rm -f $PIDFILE_2
        return $(($(max_number $RETVAL_1 $RETVAL_2) + 0))
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
        #
        # If the daemon can reload its configuration without
        # restarting (for example, when it is sent a SIGHUP),
        # then implement that here.
        #
        start-stop-daemon -K --signal 1 -q -n $NAME_1 --chuid $USER
        start-stop-daemon -K --signal 1 -q -n $NAME_2 --chuid $USER
        return 0
}

case "$1" in
  start)
        [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME_1 & $NAME_2"
        do_start
        case "$?" in
                0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
                2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;
  stop)
        [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME_1 & $NAME_2"
        do_stop
        case "$?" in
                0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
                2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;
  status)
       status_of_proc $NAME_1 $NAME_1 & status_of_proc $NAME_2 $NAME_2 && exit 0 || exit $?
       ;;
  #reload|force-reload)
        #
        # If do_reload() is not implemented then leave this commented out
        # and leave 'force-reload' as an alias for 'restart'.
        #
        #log_daemon_msg "Reloading $DESC" "$NAME"
        #do_reload
        #log_end_msg $?
        #;;
  restart|force-reload)
        #
        # If the "reload" option is implemented then remove the
        # 'force-reload' alias
        #
        log_daemon_msg "Restarting $DESC" "$NAME_1 & $NAME_2"
        do_stop
        case "$?" in
          0|1)
                do_start
                case "$?" in
                        0) log_end_msg 0 ;;
                        1) log_end_msg 1 ;; # Old process is still running
                        *) log_end_msg 1 ;; # Failed to start
                esac
                ;;
          *)
                # Failed to stop
                log_end_msg 1
                ;;
        esac
        ;;
  *)
        #echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
        echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
        exit 3
        ;;
esac

